<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OOT problems</title>
    <url>/2022/04/28/OOT-problems/</url>
    <content><![CDATA[<p>GNU Radio 3.10<br>Include some OOT problems.<br>Refered blog <a href="https://blog.csdn.net/Flag_ing/article/details/121008197?spm=1001.2014.3001.5501">GNU Radio3.8 常见的OOT问题</a></p>
<span id="more"></span>

<h3 id="1-Fix-input-parameters-after-creating-an-OOT"><a href="#1-Fix-input-parameters-after-creating-an-OOT" class="headerlink" title="1. Fix input parameters after creating an OOT"></a>1. Fix input parameters after creating an OOT</h3><p>When an OOT block is generated, we may want to fix it’s input parameters. The file you need to fix can be found in this <a href="https://zfyleo.github.io/2022/04/16/OOT-tutorial/#more">blog</a>. But when you fix the file in <strong>&#x2F;include&#x2F;gnuradio&#x2F;moduleName&#x2F;blockname.h</strong>,<br>you will meet the problems while doing the <strong>make</strong> command, which can be seen in the picture below</p>
<img src="/2022/04/28/OOT-problems/out_of_sync_error.png" class="" title="out_of_sync_error">
<p>Then you need to run the following command to rebind the module. An important thing is that someone will run this command under <strong>build</strong> path because they always run the <strong>make</strong> command there, then the block not found error will occur. Therefore, you need to run the command out of the build file path.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/modulename$ gr_modtool bind blockName</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>gnuradio</category>
        <category>OOT</category>
      </categories>
      <tags>
        <tag>gnuradio</tag>
        <tag>OOT</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Radio 3.10 OOT(c++basic)</title>
    <url>/2022/04/16/OOT-tutorial/</url>
    <content><![CDATA[<p>GNU Radio 3.10 create OOT<br>Refered blog <a href="https://blog.csdn.net/Flag_ing/article/details/118568932">GNU Radio3.8创建OOT的详细过程(基础&#x2F;C++)</a><br>and <a href="https://blog.csdn.net/qq_41300075/article/details/121411905">Gnuradio(3.10)创建OOT自定义模块</a></p>
<span id="more"></span>

<h3 id="1-Create-OOT-module"><a href="#1-Create-OOT-module" class="headerlink" title="1. Create OOT module"></a>1. Create OOT module</h3><p>The following command creates a module named <strong>mymode</strong>,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gr_modtool newmod mymod</span><br></pre></td></tr></table></figure>
<p>Then you can find a file dictionary, and u will find<br>apps&#x2F;, cmake&#x2F;, docs&#x2F;, examples&#x2F;, grc&#x2F;, include&#x2F;, lib&#x2F;, python&#x2F;, CMakeLists.txt in the dictionary <strong>gr_mymode</strong></p>
<h3 id="2-Add-block-into-the-module"><a href="#2-Add-block-into-the-module" class="headerlink" title="2. Add block into the module"></a>2. Add block into the module</h3><p>We use following command and create a block named <strong>square1_ff</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/gr_mymod$ gr_modtool add -t general -l cpp square1_ff</span><br></pre></td></tr></table></figure>
<p><strong>-t</strong>: block type, include [sink、source、sync、decimator、interpolator、general、tagged_stream、hier、noblock]<br><strong>-l</strong>: language, include [cpp, python, c++]</p>
<p>Then we need to specify the default arguments, Python QA code(test file), C++ QA.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please specify the copyright holder: </span><br><span class="line">Enter valid argument list, including default arguments: </span><br><span class="line"> </span><br><span class="line">Add Python QA code? [Y/n] Y</span><br><span class="line">Add C++ QA code? [y/N] N</span><br><span class="line">Adding file &#x27;lib/square1_ff_impl.h&#x27;...</span><br><span class="line">Failed to run clang-format: %s [Errno 2] No such file or directory: &#x27;clang-format&#x27;</span><br><span class="line">Adding file &#x27;lib/square1_ff_impl.cc&#x27;...</span><br><span class="line">Failed to run clang-format: %s [Errno 2] No such file or directory: &#x27;clang-format&#x27;</span><br><span class="line">Adding file &#x27;include/gnuradio/mymod/square1_ff.h&#x27;...</span><br><span class="line">Failed to run clang-format: %s [Errno 2] No such file or directory: &#x27;clang-format&#x27;</span><br></pre></td></tr></table></figure>
<p>If you find this error, use following command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install clang-format</span><br></pre></td></tr></table></figure>
<h3 id="3-Uninstall-block"><a href="#3-Uninstall-block" class="headerlink" title="3. Uninstall block"></a>3. Uninstall block</h3><p>3.1 Uninstall block installed<br>If you want to unstall the block already installed into the system. Then <strong>cd</strong> to the <strong>build</strong> file and use following command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/build$ sudo make uninstall block_name</span><br></pre></td></tr></table></figure>
<p>3.2 Delete the files related to the block<br>cd to the module file list and do the command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/gr_mymod$ gr_modtool rm block_name</span><br></pre></td></tr></table></figure>

<h3 id="4-Write-the-test-code-for-block-Optional"><a href="#4-Write-the-test-code-for-block-Optional" class="headerlink" title="4. Write the test code for block(Optional)"></a>4. Write the test code for block(Optional)</h3><p>QA file under gr_mymod&#x2F;python named qa_square_ff.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">#</span><br><span class="line"># Copyright 2022 gr-mymod author.</span><br><span class="line">#</span><br><span class="line"># SPDX-License-Identifier: GPL-3.0-or-later</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">from gnuradio import gr, gr_unittest</span><br><span class="line">from gnuradio import blocks</span><br><span class="line">try:</span><br><span class="line">  from gnuradio.mymod import square1_ff</span><br><span class="line">except ImportError:</span><br><span class="line">    import os</span><br><span class="line">    import sys</span><br><span class="line">    dirname, filename = os.path.split(os.path.abspath(__file__))</span><br><span class="line">    sys.path.append(os.path.join(dirname, &quot;bindings&quot;))</span><br><span class="line">    from gnuradio.mymod import square1_ff</span><br><span class="line"></span><br><span class="line">class qa_square1_ff(gr_unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        self.tb = gr.top_block()</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        self.tb = None</span><br><span class="line"></span><br><span class="line">    def test_instance(self):</span><br><span class="line">        # FIXME: Test will fail until you pass sensible arguments to the constructor</span><br><span class="line">        instance = square1_ff()</span><br><span class="line"></span><br><span class="line">    def test_001_descriptive_test_name(self):</span><br><span class="line">        src_data = (-3, 4, -5.5, 2, 3)</span><br><span class="line">        expected_result = (9, 16, 30.25, 4, 9)</span><br><span class="line">        src = blocks.vector_source_f(src_data) </span><br><span class="line">        sqr = square1_ff()</span><br><span class="line">        dst = blocks.vector_sink_f()</span><br><span class="line">        self.tb.connect(src, sqr) </span><br><span class="line">        self.tb.connect(sqr,dst)</span><br><span class="line">        self.tb.run()</span><br><span class="line">        result_data = dst.data()</span><br><span class="line">        self.assertFloatTuplesAlmostEqual(expected_result, result_data, 6)</span><br><span class="line"></span><br><span class="line">        # check data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    gr_unittest.run(qa_square1_ff, &quot;qa_square_ff.yaml&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="5-Write-block-C"><a href="#5-Write-block-C" class="headerlink" title="5. Write block(C++)"></a>5. Write block(C++)</h3><p>OOT C++ file located under gr_mymode&#x2F;lib, named square_ff_impl.cc和square_ff_impl.h. Normally, .h files done need to fix.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifdef HAVE_CONFIG_H</span><br><span class="line">#include &quot;config.h&quot;</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">#include &lt;gnuradio/io_signature.h&gt;</span><br><span class="line">#include &quot;square1_ff_impl.h&quot;</span><br><span class="line"> </span><br><span class="line">namespace gr &#123;</span><br><span class="line">  namespace mymod &#123;</span><br><span class="line"> </span><br><span class="line">    square1_ff::sptr</span><br><span class="line">    square1_ff::make()</span><br><span class="line">    &#123;</span><br><span class="line">      return gnuradio::get_initial_sptr</span><br><span class="line">        (new square1_ff_impl());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 私有构造函数 所有信号处理块都是 gr::block 或其子类的派生类*/</span><br><span class="line">    square1_ff_impl::square1_ff_impl()</span><br><span class="line">      : gr::block(&quot;square1_ff&quot;,</span><br><span class="line">                  gr::io_signature::make(1, 1, sizeof (float)),</span><br><span class="line">                  gr::io_signature::make(1, 1, sizeof (float)))</span><br><span class="line">    &#123; &#125;// 构造函数留空,因为该block不需要设置任何东西。 </span><br><span class="line"> </span><br><span class="line">    /*  虚拟析构函数 */</span><br><span class="line">    square1_ff_impl::~square1_ff_impl()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    /* forecast函数作用为：告诉调度器有多少输入items被用来生成多少个输出items，这里他们是一样的 */</span><br><span class="line">    void</span><br><span class="line">    square1_ff_impl::forecast (int noutput_items, gr_vector_int &amp;ninput_items_required)</span><br><span class="line">    &#123;</span><br><span class="line">      ninput_items_required[0] = noutput_items;// 索引0代表这是第一个输入端口，这里我们只有一个输入端口</span><br><span class="line">    &#125;</span><br><span class="line">    // general_work()是定义在基类gr::block中的纯虚函数，因此在子类中必须进行重写</span><br><span class="line">    // general_work()是执行实际信号处理任务的函数</span><br><span class="line">    int</span><br><span class="line">    square1_ff_impl::general_work (int noutput_items,</span><br><span class="line">                                  gr_vector_int &amp;ninput_items,</span><br><span class="line">                                  gr_vector_const_void_star &amp;input_items,</span><br><span class="line">                                  gr_vector_void_star &amp;output_items)</span><br><span class="line">    &#123;</span><br><span class="line">      const float *in = (const float *) input_items[0];</span><br><span class="line">      float *out = (float *) output_items[0];</span><br><span class="line"> </span><br><span class="line">      for(int i = 0; i &lt; noutput_items; i++) &#123;</span><br><span class="line">        out[i] = in[i] * in[i];</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      // Tell runtime system how many input items we consumed on</span><br><span class="line">      // 每个输入数据流需要消耗多少items，由于ninput_items=noutput_items，这里填noutput_items</span><br><span class="line">      consume_each (noutput_items);</span><br><span class="line"> </span><br><span class="line">      // Tell runtime system how many output items we produced.</span><br><span class="line">      return noutput_items;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  &#125; /* namespace mymod */</span><br><span class="line">&#125; /* namespace gr */</span><br></pre></td></tr></table></figure>

<h3 id="6-Use-CMake-to-compile-and-test-code"><a href="#6-Use-CMake-to-compile-and-test-code" class="headerlink" title="6. Use CMake to compile and test code"></a>6. Use CMake to compile and test code</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd path-to-your-top-directory</span><br><span class="line">mkdir build</span><br><span class="line">cd build/</span><br><span class="line">cmake ../</span><br><span class="line">make</span><br><span class="line">make test</span><br></pre></td></tr></table></figure>
<p>If you meet problems when <strong>make test</strong>, use following command to read details</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/build$ctest -V -R square</span><br></pre></td></tr></table></figure>
<p><strong>-V</strong>  means get details<br><strong>-R</strong> means regular match</p>
<h3 id="7-Install-block-to-gnuradio"><a href="#7-Install-block-to-gnuradio" class="headerlink" title="7. Install block to gnuradio"></a>7. Install block to gnuradio</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gr_modtool makeyaml square_ff</span><br></pre></td></tr></table></figure>
<p>Noticed: the comments need to be deleted</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id: mymod_square1_ff</span><br><span class="line">label: square1_ff</span><br><span class="line">category: &#x27;[Mymod]&#x27;</span><br><span class="line">templates:</span><br><span class="line">  imports: import mymod</span><br><span class="line">  make: mymod.square1_ff()</span><br><span class="line">inputs:</span><br><span class="line">- label: in</span><br><span class="line">  domain: stream</span><br><span class="line">  dtype: float</span><br><span class="line">  multiplicity: 1 </span><br><span class="line">outputs:</span><br><span class="line">- label: out</span><br><span class="line">  domain: stream</span><br><span class="line">  dtype: float</span><br><span class="line">  multiplicity: 1</span><br><span class="line">file_format: 1</span><br></pre></td></tr></table></figure>
<p>Go back to <strong>build</strong> dic and do</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/build$ sudo make install</span><br><span class="line">~/build$ sudo ldcondig</span><br></pre></td></tr></table></figure>
<h3 id="8-Add-arguments-parameters"><a href="#8-Add-arguments-parameters" class="headerlink" title="8. Add arguments(parameters)"></a>8. Add arguments(parameters)</h3><p>To create a block, you will need to enter the valid arguments. Normally we will skip this step or most of times we need to fix it later</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/gr-mymod$ gr_modtool add -t general -l cpp square2_ff</span><br><span class="line">GNU Radio module name identified: mymod</span><br><span class="line">Language: C++</span><br><span class="line">Block/code identifier: square2_ff</span><br><span class="line">Please specify the copyright holder: </span><br><span class="line">Enter valid argument list, including default arguments: </span><br></pre></td></tr></table></figure>
<p>Then there are several files need to fix when you want to add or change parameters, they are<br><strong>&#x2F;lib&#x2F;newmod.cc</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">square2_ff::sptr</span><br><span class="line">square2_ff::make(type parameter1, type parameter2)</span><br><span class="line">&#123;</span><br><span class="line">  return gnuradio::make_block_sptr&lt;square2_ff_impl&gt;(</span><br><span class="line">    parameter1, parameter2);</span><br><span class="line">&#125;</span><br><span class="line">square2_ff_impl::square2_ff_impl(type parameter1, type parameter2)</span><br></pre></td></tr></table></figure>
<p><strong>&#x2F;lib&#x2F;newmod.h</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public:</span><br><span class="line">      square2_ff_impl(type parameter1, type parameter2);</span><br></pre></td></tr></table></figure>
<p><strong>&#x2F;include&#x2F;gnuradio&#x2F;ModuleName&#x2F;newmod.h</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static sptr make(type parameter1, type parameter2);</span><br></pre></td></tr></table></figure>
<p><strong>&#x2F;grc&#x2F;newmod.yml</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">templates:</span><br><span class="line">  imports: from gnuradio import mymod</span><br><span class="line">  make: mymod.square2_ff($&#123;parameter1&#125;, $&#123;parameter2]&#125;)</span><br><span class="line"></span><br><span class="line">#  Make one &#x27;parameters&#x27; list entry for every parameter you want settable from the GUI.</span><br><span class="line">#     Keys include:</span><br><span class="line">#     * id (makes the value accessible as keyname, e.g. in the make entry)</span><br><span class="line">#     * label (label shown in the GUI)</span><br><span class="line">#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)</span><br><span class="line">#     * default</span><br><span class="line">parameters:</span><br><span class="line">- id: parametername_replace_me</span><br><span class="line">  label: FIX ME:</span><br><span class="line">  dtype: string</span><br><span class="line">  default: You need to fill in your grc/mymod_square2_ff.block.yaml</span><br><span class="line">#- id: ...</span><br><span class="line">#  label: ...</span><br><span class="line">#  dtype: ...</span><br><span class="line"></span><br><span class="line">#  Make one &#x27;inputs&#x27; list entry per input and one &#x27;outputs&#x27; list entry per output.</span><br><span class="line">#  Keys include:</span><br><span class="line">#      * label (an identifier for the GUI)</span><br><span class="line">#      * domain (optional - stream or message. Default is stream)</span><br><span class="line">#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)</span><br><span class="line">#      * vlen (optional - data stream vector length. Default is 1)</span><br><span class="line">#      * optional (optional - set to 1 for optional inputs. Default is 0)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>gnuradio</category>
        <category>OOT</category>
      </categories>
      <tags>
        <tag>gnuradio</tag>
        <tag>OOT</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>github blog 搭建记录</title>
    <url>/2022/04/14/blog/</url>
    <content><![CDATA[<p>关于个人博客搭建过程中的问题</p>
<span id="more"></span>
<h3 id="首先是如何搭建github个人博客"><a href="#首先是如何搭建github个人博客" class="headerlink" title="首先是如何搭建github个人博客"></a>首先是如何搭建github个人博客</h3><p>主要参考这篇<a href="https://blog.csdn.net/yaorongke/article/details/119089190">博客</a></p>
<h3 id="更新文章和主题各种东西"><a href="#更新文章和主题各种东西" class="headerlink" title="更新文章和主题各种东西"></a>更新文章和主题各种东西</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post filename //新建文章</span><br><span class="line">hexo clean // 清除缓存</span><br><span class="line">hexo g -d  // 更新到网站上</span><br></pre></td></tr></table></figure>
<p>有时候更新没法显示就可以清除下浏览器缓存就行了</p>
<h3 id="Hexo-Next-主题博客个性化配置"><a href="#Hexo-Next-主题博客个性化配置" class="headerlink" title="Hexo-Next 主题博客个性化配置"></a>Hexo-Next 主题博客个性化配置</h3><p>参考这篇<a href="https://blog.csdn.net/as480133937/article/details/100138838/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3">博客</a></p>
<h3 id="主页仅显示摘要"><a href="#主页仅显示摘要" class="headerlink" title="主页仅显示摘要"></a>主页仅显示摘要</h3><p>在文章中摘要部分前添加&lt;!–more–&gt;</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Ubuntu 22.04 + Gnuradio 3.10</title>
    <url>/2022/04/14/gnuradio/</url>
    <content><![CDATA[<p>Install Ubuntu 22.04 + Gnuradio 3.10</p>
<span id="more"></span>
<ol>
<li>Install Dependencies<br>Install dependencies from <a href="https://wiki.gnuradio.org/index.php/UbuntuInstall">https://wiki.gnuradio.org/index.php/UbuntuInstall</a></li>
<li>Install gnuradio by Pybombs<br>The installation process can be <a href="https://github.com/gnuradio/pybombs">here</a><br>The importance thing need to noticed is that the receipt need to changed in order to install gnuradio 3.10<br>First, go to ~&#x2F;.pybombs&#x2F;recipes&#x2F;gr-recipes&#x2F;gnuradio39.lwr and replace maint-3.9 to maint-3.10<br>Second<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pybombs prefix init ~/prefix-3.8 -R gnuradio-default</span><br></pre></td></tr></table></figure>
~&#x2F;prefix-3.8 is the path where you install gnuradio3.10 while gnuradio-default is the receipt representing the version of gnuradio you install<br>So, we need to fixed the receipt as<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pybombs prefix init ~/prefix-3.8 -R gnuradio39</span><br></pre></td></tr></table></figure></li>
<li>Install pybind11<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pybind11-dev</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>gnuradio</category>
      </categories>
      <tags>
        <tag>gnuradio</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/04/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! </p>
<span id="more"></span>>
<p>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
